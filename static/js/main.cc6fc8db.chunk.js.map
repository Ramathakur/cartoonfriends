{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","cardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACP,yBAAKC,IAAI,SAASC,IAAG,0CAAsCH,EAAtC,mBAE3B,6BACE,4BAAKF,GACL,2BAAIC,MCcGK,EAnBC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAChB,OACE,6BAECA,EAAOC,KAAI,SAACC,EAAMC,GACrB,OACE,kBAAC,EAAD,CACGC,IAAMD,EACNR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCATW,EAZG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAChC,OACK,yBAAKX,UAAU,OAChB,2BACAA,UAAU,gCACfY,KAAK,SACJC,YAAY,eACbC,SAAUH,MCEKI,G,MARF,SAACC,GACb,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UAC3DJ,EAAMK,YC+CDC,E,YAzCd,aAAe,IAAD,8BACb,+CAiBFC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAjBjC,EAAKC,MAAO,CACfxB,OAAQ,GACRM,YAAY,IAJH,E,iFAUK,IAAD,OAClBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAAErB,OAAO6B,S,+BAQzB,IAAD,OACDC,EAAiBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GACnD,OAAOA,EAAOP,KAAKwC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAKlE,OACC,yBAAKrC,UAAU,MACf,wBAAIA,UAAU,MAAd,kBACA,kBAAC,EAAD,CAAWW,aAAgBwB,KAAKZ,iBAChC,kBAAC,EAAD,KACD,kBAACgB,EAAD,CAAUnC,OAAQ8B,U,GAlCDM,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SDyHzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.cc6fc8db.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n            <img alt='robots' src={ `https://robohash.org/testset=se4${id}?size=200x200` } />\r\n\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst cardList =({robots}) =>{\r\n\t\treturn\t(\r\n\t\t\t <div>\r\n\t\t\t {  \r\n\t\t\t  robots.map((user, i) =>{\r\n\t\treturn\t(\r\n\t\t\t <Card \r\n\t\t     key= {i} \r\n\t\t     id={robots[i].id} \r\n\t\t     name={robots[i].name} \r\n\t\t     email={robots[i].email} />\r\n\t\t     );\r\n             })\r\n             }\r\n             </div>\r\n             );\r\n }\r\n     \r\n\r\nexport default cardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n\treturn(\r\n      <div className='pa2'>\r\n     <input \r\n     className='pa3 b2 b--green bg-light-blue'\r\ntype='Search' \r\n placeholder='search robot'\r\nonChange={searchChange}\r\n/>\r\n</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import  React from 'react';  \r\n\r\n\r\nconst Scroll=(props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border:'5px solid black', height:'800px'} } >\r\n\t        {props.children }\r\n       </div> \r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css'; \r\nimport  Scroll  from './Scroll';  \r\n\r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor() {\r\n\t\tsuper()\r\n         this.state ={\r\n\t     robots: [],\r\n\t     searchfield:''\r\n }\r\n \r\n}\r\n\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t.then(users =>this.setState({ robots:users }));\r\n\t\r\n}\r\n\r\n\r\nonSearchChange = (event) =>{\r\n\tthis.setState({searchfield: event.target.value})\r\n}\r\n   render() {\r\n   \t\tconst filteredRobots = this.state.robots.filter(robots =>{\r\n\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t})\r\n\r\n\r\n\r\n\treturn(\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f1'>CartoonFriends</h1>\r\n\t\t<SearchBox searchChange = {this.onSearchChange} />\r\n\t\t<Scroll>\r\n\t<CardList robots={filteredRobots}/>\r\n\t</Scroll>\r\n  </div>\r\n\t);\r\n}\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}